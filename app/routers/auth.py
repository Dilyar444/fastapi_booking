from fastapi import APIRouter, Depends, HTTPException, status, Body
from sqlalchemy.orm import Session
from pydantic import BaseModel
from typing import Optional
from app.core.security import create_access_token, verify_password, get_password_hash
from app.db.session import get_db
from app.models.models import User
from app.schemas.user import UserCreate

router = APIRouter(
    prefix="/auth",
    tags=["üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],  # –†—É—Å—Å–∫–∏–π —Ç–µ–≥ —Å–æ —Å–º–∞–π–ª–∏–∫–æ–º
    responses={404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}}
)

@router.post(
    "/register",
    status_code=201,
    summary="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å email –∏ –ø–∞—Ä–æ–ª–µ–º",
    response_description="–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
)
def register(user: UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.email == user.email).first()
    if db_user:
        raise HTTPException(
            status_code=400,
            detail="‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        )
    
    hashed_password = get_password_hash(user.password)
    new_user = User(email=user.email, hashed_password=hashed_password)
    db.add(new_user)
    db.commit()
    
    return {
        "message": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
        "user_id": new_user.id
    }

class LoginRequest(BaseModel):
    email: str
    password: str

@router.post(
    "/token",
    summary="üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
    description="–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é",
    response_description="JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"
)
async def login(login_data: LoginRequest = Body(...), db: Session = Depends(get_db)):
    user = db.query(User).filter(User.email == login_data.email).first()
    
    if not user or not verify_password(login_data.password, user.hashed_password):
        raise HTTPException(
            status_code=401,
            detail="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        )
    
    return {
        "access_token": create_access_token(data={"sub": user.email}),
        "token_type": "bearer",
        "message": "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    }